#!/usr/bin/env pwsh

Write-Host "üéØ Test de Validation - Nouveau Composant SynapseVoiceInterface" -ForegroundColor Cyan
Write-Host "=====================================================================" -ForegroundColor Cyan
Write-Host ""

$testResults = @()

# Test 1: V√©rification des fichiers cr√©√©s
Write-Host "üìÅ Test 1: V√©rification des fichiers du nouveau syst√®me..." -ForegroundColor Yellow

$requiredFiles = @(
    "src/components/ai/SynapseVoiceInterface.tsx",
    "src/components/ai/SynapseVolumeVisualizer.tsx", 
    "src/components/ai/synapse-voice-interface.scss",
    "src/components/ai/synapse-volume-visualizer.scss",
    "src/hooks/use-synapse-voice.ts",
    "src/lib/synapse-voice-client.ts",
    "src/lib/synapse-audio-streamer.ts",
    "src/lib/audioworklet-registry.ts",
    "src/lib/worklets/synapse-volume-meter.ts",
    "src/lib/worklets/synapse-audio-processor.ts"
)

$allFilesExist = $true
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file - MANQUANT" -ForegroundColor Red
        $allFilesExist = $false
    }
}

if ($allFilesExist) {
    Write-Host "‚úÖ Tous les fichiers requis sont pr√©sents" -ForegroundColor Green
    $testResults += "‚úÖ Fichiers syst√®me: PASS"
} else {
    Write-Host "‚ùå Certains fichiers sont manquants" -ForegroundColor Red
    $testResults += "‚ùå Fichiers syst√®me: FAIL"
}

Write-Host ""

# Test 2: V√©rification des imports et remplacement
Write-Host "üîÑ Test 2: V√©rification du remplacement dans les composants..." -ForegroundColor Yellow

$globalVoiceAssistant = Get-Content "src/components/ai/GlobalVoiceAssistant.tsx" -Raw
$enhancedGlobalVoiceAssistant = Get-Content "src/components/ai/EnhancedGlobalVoiceAssistant.tsx" -Raw

if ($globalVoiceAssistant -match "SynapseVoiceInterface" -and $globalVoiceAssistant -notmatch "GeminiLiveInterface") {
    Write-Host "   ‚úÖ GlobalVoiceAssistant.tsx - Import SynapseVoiceInterface correct" -ForegroundColor Green
    $globalImportOk = $true
} else {
    Write-Host "   ‚ùå GlobalVoiceAssistant.tsx - Import non mis √† jour" -ForegroundColor Red
    $globalImportOk = $false
}

if ($enhancedGlobalVoiceAssistant -match "SynapseVoiceInterface" -and $enhancedGlobalVoiceAssistant -notmatch "GeminiLiveInterface") {
    Write-Host "   ‚úÖ EnhancedGlobalVoiceAssistant.tsx - Import SynapseVoiceInterface correct" -ForegroundColor Green
    $enhancedImportOk = $true
} else {
    Write-Host "   ‚ùå EnhancedGlobalVoiceAssistant.tsx - Import non mis √† jour" -ForegroundColor Red
    $enhancedImportOk = $false
}

if ($globalImportOk -and $enhancedImportOk) {
    Write-Host "‚úÖ Remplacement des imports r√©ussi" -ForegroundColor Green
    $testResults += "‚úÖ Remplacement imports: PASS"
} else {
    Write-Host "‚ùå Remplacement des imports incomplet" -ForegroundColor Red
    $testResults += "‚ùå Remplacement imports: FAIL"
}

Write-Host ""

# Test 3: V√©rification des d√©pendances
Write-Host "üì¶ Test 3: V√©rification des d√©pendances..." -ForegroundColor Yellow

$packageJson = Get-Content "package.json" | ConvertFrom-Json

if ($packageJson.dependencies.eventemitter3) {
    Write-Host "   ‚úÖ eventemitter3 install√© (version: $($packageJson.dependencies.eventemitter3))" -ForegroundColor Green
    $eventEmitterOk = $true
} else {
    Write-Host "   ‚ùå eventemitter3 non install√©" -ForegroundColor Red
    $eventEmitterOk = $false
}

if ($packageJson.devDependencies."sass-embedded") {
    Write-Host "   ‚úÖ sass-embedded install√© (version: $($packageJson.devDependencies.'sass-embedded'))" -ForegroundColor Green
    $sassOk = $true
} else {
    Write-Host "   ‚ùå sass-embedded non install√©" -ForegroundColor Red
    $sassOk = $false
}

if ($eventEmitterOk -and $sassOk) {
    Write-Host "‚úÖ D√©pendances correctement install√©es" -ForegroundColor Green
    $testResults += "‚úÖ D√©pendances: PASS"
} else {
    Write-Host "‚ùå D√©pendances manquantes" -ForegroundColor Red
    $testResults += "‚ùå D√©pendances: FAIL"
}

Write-Host ""

# Test 4: Compilation TypeScript
Write-Host "üîß Test 4: Test de compilation TypeScript..." -ForegroundColor Yellow

try {
    $tscOutput = npx tsc --noEmit --skipLibCheck 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Compilation TypeScript r√©ussie" -ForegroundColor Green
        $testResults += "‚úÖ Compilation TS: PASS"
    } else {
        Write-Host "   ‚ùå Erreurs de compilation TypeScript:" -ForegroundColor Red
        Write-Host $tscOutput -ForegroundColor Red
        $testResults += "‚ùå Compilation TS: FAIL"
    }
} catch {
    Write-Host "   ‚ùå Erreur lors du test de compilation: $_" -ForegroundColor Red
    $testResults += "‚ùå Compilation TS: ERROR"
}

Write-Host ""

# Test 5: Architecture event-driven
Write-Host "üé≠ Test 5: V√©rification de l'architecture event-driven..." -ForegroundColor Yellow

$synapseClientContent = Get-Content "src/lib/synapse-voice-client.ts" -Raw
$useHookContent = Get-Content "src/hooks/use-synapse-voice.ts" -Raw

$eventDrivenFeatures = @(
    @{ File = "synapse-voice-client.ts"; Pattern = "extends EventEmitter"; Name = "EventEmitter h√©ritage" },
    @{ File = "synapse-voice-client.ts"; Pattern = "eventemitter3"; Name = "Import eventemitter3" },
    @{ File = "use-synapse-voice.ts"; Pattern = "client\.on\("; Name = "Event listeners dans hook" },
    @{ File = "use-synapse-voice.ts"; Pattern = "handleStatusChange"; Name = "Gestionnaires d'√©v√©nements" }
)

$eventDrivenOk = $true
foreach ($feature in $eventDrivenFeatures) {
    if ($feature.File -eq "synapse-voice-client.ts") {
        $content = $synapseClientContent
    } else {
        $content = $useHookContent
    }
    
    if ($content -match $feature.Pattern) {
        Write-Host "   ‚úÖ $($feature.Name)" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $($feature.Name) - NON TROUV√â" -ForegroundColor Red
        $eventDrivenOk = $false
    }
}

if ($eventDrivenOk) {
    Write-Host "‚úÖ Architecture event-driven impl√©ment√©e" -ForegroundColor Green
    $testResults += "‚úÖ Architecture event-driven: PASS"
} else {
    Write-Host "‚ùå Architecture event-driven incompl√®te" -ForegroundColor Red
    $testResults += "‚ùå Architecture event-driven: FAIL"
}

Write-Host ""

# Test 6: AudioWorklets
Write-Host "üéµ Test 6: V√©rification des AudioWorklets..." -ForegroundColor Yellow

$workletFiles = @(
    "src/lib/worklets/synapse-volume-meter.ts",
    "src/lib/worklets/synapse-audio-processor.ts"
)

$audioWorkletOk = $true
foreach ($workletFile in $workletFiles) {
    if (Test-Path $workletFile) {
        $workletContent = Get-Content $workletFile -Raw
        if ($workletContent -match "AudioWorkletProcessor") {
            Write-Host "   ‚úÖ $workletFile - AudioWorkletProcessor trouv√©" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå $workletFile - AudioWorkletProcessor manquant" -ForegroundColor Red
            $audioWorkletOk = $false
        }
    } else {
        Write-Host "   ‚ùå $workletFile - Fichier manquant" -ForegroundColor Red
        $audioWorkletOk = $false
    }
}

if ($audioWorkletOk) {
    Write-Host "‚úÖ AudioWorklets correctement impl√©ment√©s" -ForegroundColor Green
    $testResults += "‚úÖ AudioWorklets: PASS"
} else {
    Write-Host "‚ùå AudioWorklets manquants ou incorrects" -ForegroundColor Red
    $testResults += "‚ùå AudioWorklets: FAIL"
}

Write-Host ""

# R√©sum√© final
Write-Host "üìä R√âSUM√â DES TESTS" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Cyan

$passCount = ($testResults | Where-Object { $_ -match "PASS" }).Count
$totalCount = $testResults.Count

foreach ($result in $testResults) {
    if ($result -match "PASS") {
        Write-Host $result -ForegroundColor Green
    } else {
        Write-Host $result -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "Score: $passCount/$totalCount tests r√©ussis" -ForegroundColor $(if ($passCount -eq $totalCount) { "Green" } else { "Yellow" })

if ($passCount -eq $totalCount) {
    Write-Host ""
    Write-Host "üéâ SUCC√àS! Le nouveau syst√®me SynapseVoiceInterface est op√©rationnel!" -ForegroundColor Green
    Write-Host "‚ú® Pr√™t pour les tests en mode d√©veloppement sur http://localhost:8080" -ForegroundColor Green
} else {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Il reste quelques √©l√©ments √† corriger avant que le syst√®me soit compl√®tement fonctionnel." -ForegroundColor Yellow
}

Write-Host ""
